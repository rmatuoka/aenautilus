package com.massiveProCreation.flipbook.ui{	// IMPORTS	import com.greensock.TweenLite;	import com.greensock.TweenMax;	import com.greensock.easing.*;	import com.massiveProCreation.events.CustomEvent;		import flash.display.Loader;	import flash.display.MovieClip;	import flash.display.Sprite;	import flash.events.Event;	import flash.events.IOErrorEvent;	import flash.events.MouseEvent;	import flash.geom.ColorTransform;	import flash.net.URLRequest;
			public class ControlPanel extends Sprite	{		// VARIABLES		private var _tt:ToolTip;								// tool tip module		private var _xml:XML;									// xml variable		private var _book:int;									// book variable		private var _ct:ColorTransform = new ColorTransform();  // color transform			private var _numberOfButtons:Number = 0;						// counter, number of buttons		private var _scroll:Scroll;								// scroll panel ( used for slideshow delay and volume change)		private var rightSide:Array = new Array();		private var leftSide:Array = new Array();		private var _iconsLoaded:int = 0;		private var _icon:Sprite;				//Icon loaders		private var _loaderBooks:Loader = new Loader();		private var _loaderPages:Loader = new Loader();		private var _loaderPrinter:Loader = new Loader();		private var _loaderZoom:Loader = new Loader();		private var _loaderPdf:Loader = new Loader();		private var _loaderToc:Loader = new Loader();		private var _loaderContact:Loader = new Loader();		private var _loaderSlideshow:Loader = new Loader();		private var _loaderMusic:Loader = new Loader();		private var _loaderFull:Loader = new Loader();		private var _loaderTell:Loader = new Loader();				private var _numberOfIcons:int = 11;				public function ControlPanel()		{			super();			this.addEventListener(Event.ADDED_TO_STAGE, added, false, 0, true);			// add the added to stage event		}		private function added(e:Event):void {			this.addEventListener(Event.REMOVED_FROM_STAGE, removed, false, 0, true);	// add removed from stage evet					}		private function resize(e:Event):void {			var obj:Object = this.parent.getChildByName("flipBook");					// on resize assign flipbook to obj and then set the x nad y properties			if(stage != null && obj != null){				this.x = ((stage.stageWidth - obj.fbWidth) / 2) + 5;				this.y = ((stage.stageHeight - obj.fbHeight) / 2);								if(String(_xml.setup.buttons.contact.@state) == "enabled")					// check if music and contact is enabled, isf so set it's x property					this.getChildByName("contact").x = obj.fbWidth - 45;								if(String(_xml.setup.buttons.contact.@state) == "enabled")					this.getChildByName("tell").x = this.getChildByName("contact").x - 45;					else 						this.getChildByName("tell").x = obj.fbWidth - 45;											if(String(_xml.setup.buttons.tellAFriend.@state) == "enabled")					this.getChildByName("full").x = this.getChildByName("tell").x - 45;					else if(String(_xml.setup.buttons.contact.@state) == "enabled")					this.getChildByName("full").x = this.getChildByName("contact").x - 45;					else 						this.getChildByName("full").x = obj.fbWidth - 45;											if(String(_xml.setup.buttons.full.@state) == "enabled")					this.getChildByName("music").x = this.getChildByName("full").x - 45;					else if(String(_xml.setup.buttons.tellAFriend.@state) == "enabled")					this.getChildByName("music").x = this.getChildByName("tell").x - 45;					else if(String(_xml.setup.buttons.contact.@state) == "enabled")					this.getChildByName("music").x = this.getChildByName("contact").x - 45;					else 						this.getChildByName("music").x = obj.fbWidth - 45;						}			obj = null;			}		private function loadIcons():void {						if(_xml.flipbook.length() > 1){				_loaderBooks.contentLoaderInfo.addEventListener(Event.COMPLETE, iconLoadComplete, false, 0, true);				_loaderBooks.contentLoaderInfo.addEventListener(IOErrorEvent.IO_ERROR, error, false, 0, true);				_loaderBooks.load(new URLRequest(String(_xml.setup.buttons.books.@icon)));			} else {				_numberOfIcons--;			}						if(String(_xml.setup.buttons.pages.@state) == "enabled"){				_loaderPages.contentLoaderInfo.addEventListener(Event.COMPLETE, iconLoadComplete, false, 0, true);				_loaderPages.contentLoaderInfo.addEventListener(IOErrorEvent.IO_ERROR, error, false, 0, true);				_loaderPages.load(new URLRequest(String(_xml.setup.buttons.pages.@icon)));			} else {				_numberOfIcons--;			}						if(String(_xml.setup.buttons.printer.@state) == "enabled"){				_loaderPrinter.contentLoaderInfo.addEventListener(Event.COMPLETE, iconLoadComplete, false, 0, true);				_loaderPrinter.contentLoaderInfo.addEventListener(IOErrorEvent.IO_ERROR, error, false, 0, true);				_loaderPrinter.load(new URLRequest(String(_xml.setup.buttons.printer.@icon)));			} else {				_numberOfIcons--;			}						if(String(_xml.setup.buttons.zoom.@state) == "enabled"){				_loaderZoom.contentLoaderInfo.addEventListener(Event.COMPLETE, iconLoadComplete, false, 0, true);				_loaderZoom.contentLoaderInfo.addEventListener(IOErrorEvent.IO_ERROR, error, false, 0, true);				_loaderZoom.load(new URLRequest(String(_xml.setup.buttons.zoom.@icon)));			} else {				_numberOfIcons--;			}						if(String(_xml.setup.buttons.pdf.@state) == "enabled"){				_loaderPdf.contentLoaderInfo.addEventListener(Event.COMPLETE, iconLoadComplete, false, 0, true);				_loaderPdf.contentLoaderInfo.addEventListener(IOErrorEvent.IO_ERROR, error, false, 0, true);				_loaderPdf.load(new URLRequest(String(_xml.setup.buttons.pdf.@icon)));			} else {				_numberOfIcons--;			}						if(String(_xml.setup.buttons.tableOfContent.@state) == "enabled"){				_loaderToc.contentLoaderInfo.addEventListener(Event.COMPLETE, iconLoadComplete, false, 0, true);				_loaderToc.contentLoaderInfo.addEventListener(IOErrorEvent.IO_ERROR, error, false, 0, true);				_loaderToc.load(new URLRequest(String(_xml.setup.buttons.tableOfContent.@icon)));			} else {				_numberOfIcons--;			}						if(String(_xml.setup.buttons.contact.@state) == "enabled"){				_loaderContact.contentLoaderInfo.addEventListener(Event.COMPLETE, iconLoadComplete, false, 0, true);				_loaderContact.contentLoaderInfo.addEventListener(IOErrorEvent.IO_ERROR, error, false, 0, true);				_loaderContact.load(new URLRequest(String(_xml.setup.buttons.contact.@icon)));			} else {				_numberOfIcons--;			}						if(String(_xml.setup.buttons.slideshow.@state) == "enabled"){				_loaderSlideshow.contentLoaderInfo.addEventListener(Event.COMPLETE, iconLoadComplete, false, 0, true);				_loaderSlideshow.contentLoaderInfo.addEventListener(IOErrorEvent.IO_ERROR, error, false, 0, true);				_loaderSlideshow.load(new URLRequest(String(_xml.setup.buttons.slideshow.@icon)));			} else {				_numberOfIcons--;			}						if(String(_xml.setup.buttons.music.@state) == "enabled"){				_loaderMusic.contentLoaderInfo.addEventListener(Event.COMPLETE, iconLoadComplete, false, 0, true);				_loaderMusic.contentLoaderInfo.addEventListener(IOErrorEvent.IO_ERROR, error, false, 0, true);				_loaderMusic.load(new URLRequest(String(_xml.setup.buttons.music.@icon)));			} else {				_numberOfIcons--;			}						if(String(_xml.setup.buttons.full.@state) == "enabled"){				_loaderFull.contentLoaderInfo.addEventListener(Event.COMPLETE, iconLoadComplete, false, 0, true);				_loaderFull.contentLoaderInfo.addEventListener(IOErrorEvent.IO_ERROR, error, false, 0, true);				_loaderFull.load(new URLRequest(String(_xml.setup.buttons.full.@icon)));			} else {				_numberOfIcons--;			}						if(String(_xml.setup.buttons.tellAFriend.@state) == "enabled"){				_loaderTell.contentLoaderInfo.addEventListener(Event.COMPLETE, iconLoadComplete, false, 0, true);				_loaderTell.contentLoaderInfo.addEventListener(IOErrorEvent.IO_ERROR, error, false, 0, true);				_loaderTell.load(new URLRequest(String(_xml.setup.buttons.tellAFriend.@icon)));			} else {				_numberOfIcons--;			}		}		private function error(e:IOErrorEvent):void {			trace("Loading icon error, wrong path");		}				private function iconLoadComplete(e:Event):void {			_icon = new Sprite();						if(e.target.content == _loaderSlideshow.content){				var spr:Sprite = new Sprite();				e.target.content.smoothing = true;				spr.addChild(e.target.content);				spr.getChildAt(0).x = -spr.getChildAt(0).width / 2;				spr.getChildAt(0).y = -spr.getChildAt(0).height / 2;				spr.x = spr.width / 2;				spr.y = spr.height / 2;				_icon.addChild(spr);				_icon.name = "slideshow";				_icon.y = -_icon.height;			} else if(e.target.content == _loaderMusic.content){				spr = new Sprite();				e.target.content.smoothing = true;				spr.addChild(e.target.content);				spr.getChildAt(0).x = -spr.getChildAt(0).width / 2;				spr.getChildAt(0).y = -spr.getChildAt(0).height / 2;				spr.x = spr.width / 2;				spr.y = spr.height / 2;				_icon.addChild(spr);				_icon.name = "music";				_icon.y = -_icon.height;			} else {				_icon.addChild(e.target.content);				_icon.y = -_icon.height;			}						this.addChild(_icon);						if(_icon.getChildAt(0) == _loaderBooks.content)				_icon.name = "books";			else if(_icon.getChildAt(0) == _loaderPages.content)				_icon.name = "pages";			else if(_icon.getChildAt(0) == _loaderPrinter.content)				_icon.name = "printer";			else if(_icon.getChildAt(0) == _loaderZoom.content)				_icon.name = "zoom";			else if(_icon.getChildAt(0) == _loaderPdf.content)				_icon.name = "pdf";			else if(_icon.getChildAt(0) == _loaderToc.content)				_icon.name = "toc";			else if(_icon.getChildAt(0) == _loaderContact.content)				_icon.name = "contact";			else if(_icon.getChildAt(0) == _loaderFull.content)				_icon.name = "full";			else if(_icon.getChildAt(0) == _loaderTell.content)				_icon.name = "tell";			_iconsLoaded++;						if(_iconsLoaded == _numberOfIcons)				setupControls();								}		private function setupControls():void {														trace("SETUP CONTROLS");			/* This function set ups each of the button, for each button there is an			 * if statment which checks if this feature (button) is enabled if so			 * we setup the butons background color and alpha then we setup it's			 * button mode and mouse children, at the end we add the roll over 			 * and roll out event. If feature(button) isn't enabled in the xml file			 * we remove it from the stage. For the music and slideshow option we 			 			 * need to add along with the button a litle scroll bar to give the user			 * ability to change the properties dynamitycaly, we do that with Scroll class.			 */			this.addEventListener(MouseEvent.ROLL_OUT, controlOut, false, 0, true); 			var obj:Object;			_numberOfButtons = 0;						if(_xml.flipbook.length() > 1){								Sprite(this.getChildByName("books")).buttonMode = true;				Sprite(this.getChildByName("books")).mouseChildren = false;				this.getChildByName("books").addEventListener(MouseEvent.ROLL_OUT, bOut, false, 0, true);				this.getChildByName("books").addEventListener(MouseEvent.ROLL_OVER, bOver, false, 0, true);				_numberOfButtons ++;				leftSide.push(this.getChildByName("books"));			} else {				if(this.getChildByName("books") != null && this.contains(this.getChildByName("books")))					this.removeChild(this.getChildByName("books"));			}			if(String(_xml.setup.buttons.tableOfContent.@state) == "enabled"){								Sprite(this.getChildByName("toc")).buttonMode = true;				Sprite(this.getChildByName("toc")).mouseChildren = false;				this.getChildByName("toc").addEventListener(MouseEvent.ROLL_OUT, bOut, false, 0, true);				this.getChildByName("toc").addEventListener(MouseEvent.ROLL_OVER, bOver, false, 0, true);				this.getChildByName("toc").x = 45 * _numberOfButtons;				_numberOfButtons ++;				leftSide.push(this.getChildByName("toc"));			} else {				if(this.getChildByName("toc") != null && this.contains(this.getChildByName("toc")))					this.removeChild(this.getChildByName("toc"));			}						if(String(_xml.setup.buttons.pages.@state) == "enabled"){				Sprite(this.getChildByName("pages")).buttonMode = true;				Sprite(this.getChildByName("pages")).mouseChildren = false;				this.getChildByName("pages").addEventListener(MouseEvent.ROLL_OUT, bOut, false, 0, true);				this.getChildByName("pages").addEventListener(MouseEvent.ROLL_OVER, bOver, false, 0, true);				this.getChildByName("pages").x = 45 * _numberOfButtons;				_numberOfButtons ++;				leftSide.push(this.getChildByName("pages"));			} else {				if(this.getChildByName("pages") != null && this.contains(this.getChildByName("pages")))					this.removeChild(this.getChildByName("pages"));			}						if(String(_xml.setup.buttons.zoom.@state) == "enabled"){								Sprite(this.getChildByName("zoom")).buttonMode = true;				Sprite(this.getChildByName("zoom")).mouseChildren = false;				this.getChildByName("zoom").addEventListener(MouseEvent.ROLL_OUT, bOut, false, 0, true);				this.getChildByName("zoom").addEventListener(MouseEvent.ROLL_OVER, bOver, false, 0, true);				this.getChildByName("zoom").x = 45 * _numberOfButtons;				_numberOfButtons ++;				leftSide.push(this.getChildByName("zoom"));			} else {				if(this.getChildByName("zoom") != null && this.contains(this.getChildByName("zoom")))					this.removeChild(this.getChildByName("zoom"));			}						if(String(_xml.setup.buttons.printer.@state) == "enabled"){				Sprite(this.getChildByName("printer")).buttonMode = true;				Sprite(this.getChildByName("printer")).mouseChildren = false;				this.getChildByName("printer").addEventListener(MouseEvent.ROLL_OUT, bOut, false, 0, true);				this.getChildByName("printer").addEventListener(MouseEvent.ROLL_OVER, bOver, false, 0, true);				this.getChildByName("printer").x = 45 * _numberOfButtons;				_numberOfButtons ++;				leftSide.push(this.getChildByName("printer"));			} else {				if(this.getChildByName("printer") != null && this.contains(this.getChildByName("printer")))					this.removeChild(this.getChildByName("printer"));			}						if(String(_xml.setup.buttons.pdf.@state) == "enabled"){				Sprite(this.getChildByName("pdf")).buttonMode = true;				Sprite(this.getChildByName("pdf")).mouseChildren = false;				this.getChildByName("pdf").addEventListener(MouseEvent.ROLL_OUT, bOut, false, 0, true);				this.getChildByName("pdf").addEventListener(MouseEvent.ROLL_OVER, bOver, false, 0, true);				this.getChildByName("pdf").x = 45 * _numberOfButtons;				_numberOfButtons ++;				leftSide.push(this.getChildByName("pdf"));			} else { 				if(this.getChildByName("pdf") != null && this.contains(this.getChildByName("pdf")))					this.removeChild(this.getChildByName("pdf"));			}						if(String(_xml.setup.buttons.slideshow.@state) == "enabled"){				Sprite(this.getChildByName("slideshow")).buttonMode = true;				Sprite(this.getChildByName("slideshow")).mouseChildren = false;				this.getChildByName("slideshow").addEventListener(MouseEvent.ROLL_OUT, bOut, false, 0, true);				this.getChildByName("slideshow").addEventListener(MouseEvent.ROLL_OVER, bOver, false, 0, true);				this.getChildByName("slideshow").x = 45 * _numberOfButtons;								_numberOfButtons ++;				leftSide.push(this.getChildByName("slideshow"));								if(this.getChildByName("ssScroll") != null && this.contains(this.getChildByName("ssScroll"))){					trace("already added");				} else {						_scroll = new Scroll("Slideshow speed", 20, 2, 5, uint(_xml.setup.buttons.other.@bgColor), Number(_xml.setup.buttons.other.@bgAlpha));					this.addChild(_scroll);					_scroll.x = 45 * _numberOfButtons;					_scroll.y = -40.7;					_scroll.name = "ssScroll";					_scroll.alpha = 0;					Sprite(this.getChildByName("ssScroll")).mouseEnabled = false;					Sprite(this.getChildByName("ssScroll")).mouseChildren = false;				}			} else {				if(this.getChildByName("slideshow") != null && this.contains(this.getChildByName("slideshow")))					this.removeChild(this.getChildByName("slideshow"));			}						if(String(_xml.setup.buttons.contact.@state) == "enabled"){					Sprite(this.getChildByName("contact")).buttonMode = true;   				Sprite(this.getChildByName("contact")).mouseChildren = false;				this.getChildByName("contact").addEventListener(MouseEvent.ROLL_OUT, bOut, false, 0, true);				this.getChildByName("contact").addEventListener(MouseEvent.ROLL_OVER, bOver, false, 0, true);				obj = this.parent.getChildByName("flipBook")				this.getChildByName("contact").x = obj.fbWidth - 45;				rightSide.push(this.getChildByName("contact"));			} else {				if(this.getChildByName("contact") != null && this.contains(this.getChildByName("contact")))					this.removeChild(this.getChildByName("contact"));			}			if(String(_xml.setup.buttons.tellAFriend.@state) == "enabled"){								Sprite(this.getChildByName("tell")).buttonMode = true;   				Sprite(this.getChildByName("tell")).mouseChildren = false;				this.getChildByName("tell").addEventListener(MouseEvent.ROLL_OUT, bOut, false, 0, true);				this.getChildByName("tell").addEventListener(MouseEvent.ROLL_OVER, bOver, false, 0, true);				rightSide.push(this.getChildByName("tell"));				obj = this.parent.getChildByName("flipBook");				if(String(_xml.setup.buttons.contact.@state) == "enabled"){					this.getChildByName("tell").x = this.getChildByName("contact").x - 45;					} else {					obj = this.parent.getChildByName("flipBook")					this.getChildByName("tell").x = obj.fbWidth - 45;				}			} else {				if(this.getChildByName("tell") != null && this.contains(this.getChildByName("tell")))					this.removeChild(this.getChildByName("tell"));			}						if(String(_xml.setup.buttons.full.@state) == "enabled"){					Sprite(this.getChildByName("full")).buttonMode = true;   				Sprite(this.getChildByName("full")).mouseChildren = false;				this.getChildByName("full").addEventListener(MouseEvent.ROLL_OUT, bOut, false, 0, true);				this.getChildByName("full").addEventListener(MouseEvent.ROLL_OVER, bOver, false, 0, true);				rightSide.push(this.getChildByName("full"));				obj = this.parent.getChildByName("flipBook");								if(String(_xml.setup.buttons.tellAFriend.@state) == "enabled"){					this.getChildByName("full").x = this.getChildByName("tell").x - 45;					} else if(String(_xml.setup.buttons.contact.@state) == "enabled"){					this.getChildByName("full").x = this.getChildByName("contact").x - 45;					} else {					obj = this.parent.getChildByName("flipBook")					this.getChildByName("full").x = obj.fbWidth - 45;				}			} else {				if(this.getChildByName("full") != null && this.contains(this.getChildByName("full")))					this.removeChild(this.getChildByName("full"));			}											if(String(_xml.setup.buttons.music.@state) == "enabled"){					Sprite(this.getChildByName("music")).buttonMode = true;   				Sprite(this.getChildByName("music")).mouseChildren = false;				this.getChildByName("music").addEventListener(MouseEvent.ROLL_OUT, bOut, false, 0, true);				this.getChildByName("music").addEventListener(MouseEvent.ROLL_OVER, bOver, false, 0, true);				rightSide.push(this.getChildByName("music"));				if(String(_xml.setup.buttons.full.@state) == "enabled"){					this.getChildByName("music").x = this.getChildByName("full").x - 45;					} else if(String(_xml.setup.buttons.tellAFriend.@state) == "enabled"){					this.getChildByName("music").x = this.getChildByName("tell").x - 45;					} else if(String(_xml.setup.buttons.contact.@state) == "enabled"){					this.getChildByName("music").x = this.getChildByName("contact").x - 45;					} else {					obj = this.parent.getChildByName("flipBook")					this.getChildByName("music").x = obj.fbWidth - 45;				}												if(this.getChildByName("volumeScroll") && this.contains(this.getChildByName("volumeScroll"))){					trace("already added");					_scroll.x = this.getChildByName("music").x - 122;				} else {						_scroll = new Scroll("Volume", 0, 1, 0.5, uint(_xml.setup.buttons.other.@bgColor), Number(_xml.setup.buttons.other.@bgAlpha));					this.addChild(_scroll);					_scroll.x = this.getChildByName("music").x - 122;					_scroll.y = -40.7;					_scroll.name = "volumeScroll";					_scroll.alpha = 0;					Sprite(this.getChildByName("volumeScroll")).mouseEnabled = false;					Sprite(this.getChildByName("volumeScroll")).mouseChildren = false;				}							} else {				if(this.getChildByName("music")!= null && this.contains(this.getChildByName("music")))					this.removeChild(this.getChildByName("music"));			}			this.dispatchEvent(new CustomEvent(CustomEvent.READY_TO_DISPLAY));		}		private function bOut(e:MouseEvent):void {			TweenLite.to(e.target, 1, {alpha:1, ease:Expo.easeOut});			if(_tt != null){				_tt.remove();				TweenMax.to(_tt, 1, {alpha:0, ease:Expo.easeOut, onComplete:removeObject, onCompleteParams:[_tt]});				}		}		private function controlOut(e:MouseEvent):void {			if(Sprite(this.getChildByName("ssScroll"))){				Sprite(this.getChildByName("ssScroll")).mouseEnabled = false;				Sprite(this.getChildByName("ssScroll")).mouseChildren = false;			}			if(Sprite(this.getChildByName("volumeScroll"))){				Sprite(this.getChildByName("volumeScroll")).mouseEnabled = false;				Sprite(this.getChildByName("volumeScroll")).mouseChildren = false;			}			var obj:Object;						if(Sprite(this.getChildByName("ssScroll")))				TweenMax.to(this.getChildByName("ssScroll"), 1, {alpha:0, ease:Expo.easeOut});			if(Sprite(this.getChildByName("volumeScroll")))				TweenMax.to(this.getChildByName("volumeScroll"), 1, {alpha:0, ease:Expo.easeOut});							obj = this.parent.getChildByName("flipBook")			if(obj != null){				for(var i:int = 0; i < rightSide.length; i++){								TweenMax.to(rightSide[i], 0.5, {x:obj.fbWidth - 45 - (45 * i), ease:Expo.easeOut});				}			}			for(i = 0; i < leftSide.length; i++){				TweenMax.to(leftSide[i], 0.5, {x:0 + (45 * i), ease:Expo.easeOut});			}		}		private function bOver(e:MouseEvent):void {			TweenMax.to(e.target, 1, {alpha:0.8, ease:Expo.easeOut});						if(e.target.name == "slideshow")					Sprite(this.getChildByName("ssScroll")).x = leftSide[leftSide.length-1].x + 45;							if(rightSide.length > 0){				if(e.target.name == "slideshow" && this.getChildByName("ssScroll").x + this.getChildByName("ssScroll").width > rightSide[rightSide.length-1].x){					for(var i:int = 0; i < rightSide.length; i++){						TweenMax.to(rightSide[i], 0.5, {x:rightSide[i].x + this.getChildByName("ssScroll").x + this.getChildByName("ssScroll").width - rightSide[rightSide.length-1].x + 8,							ease:Expo.easeOut});					}				}			}			if(e.target.name == "music")				Sprite(this.getChildByName("volumeScroll")).x = this.getChildByName("music").x - 122;			if(leftSide.length > 0){					if(e.target.name == "music" && this.getChildByName("volumeScroll").x < leftSide[leftSide.length-1].x + leftSide[leftSide.length-1].width){					for(i = 0; i < leftSide.length; i++){						TweenMax.to(leftSide[i], 0.5, {x:leftSide[i].x - (leftSide[leftSide.length-1].x - this.getChildByName("volumeScroll").x) - leftSide[leftSide.length-1].width - 8, ease:Expo.easeOut});					}				}			}				if(e.target.name == "slideshow"){				Sprite(this.getChildByName("ssScroll")).mouseEnabled = true;				Sprite(this.getChildByName("ssScroll")).mouseChildren = true;				TweenMax.to(this.getChildByName("ssScroll"), 1, {alpha:1, delay:0.5, ease:Expo.easeOut});								if(Sprite(this.getChildByName("volumeScroll")))					TweenMax.to(this.getChildByName("volumeScroll"), 1, {alpha:0, ease:Expo.easeOut});			}			if(e.target.name == "music"){								Sprite(this.getChildByName("volumeScroll")).mouseEnabled = true;				Sprite(this.getChildByName("volumeScroll")).mouseChildren = true;								if(Sprite(this.getChildByName("ssScroll")))					TweenMax.to(this.getChildByName("ssScroll"), 1, {alpha:0, ease:Expo.easeOut});								TweenMax.to(this.getChildByName("volumeScroll"), 1, {alpha:1, delay:0.5, ease:Expo.easeOut});			}						if(String(_xml.setup.buttons.@toolTips) == "enabled"){																	// check if tool tips enabled				if(e.target.name == "books")																				// check which button was rolled over					_tt = new ToolTip(String(_xml.setup.buttons.books.@toolTip));													// then create new tool tip 				else if (e.target.name == "pages")					_tt = new ToolTip(String(_xml.setup.buttons.pages.@toolTip));				else if (e.target.name == "printer")						_tt = new ToolTip(String(_xml.setup.buttons.printer.@toolTip));				else if (e.target.name == "zoom")					_tt = new ToolTip(String(_xml.setup.buttons.zoom.@toolTip))				else if (e.target.name == "pdf")					_tt = new ToolTip(String(_xml.setup.buttons.pdf.@toolTip));				else if (e.target.name == "contact")					_tt = new ToolTip(String(_xml.setup.buttons.contact.@toolTip));					else if (e.target.name == "music")					_tt = new ToolTip(String(_xml.setup.buttons.music.@toolTip));					else if (e.target.name == "slideshow")					_tt = new ToolTip(String(_xml.setup.buttons.slideshow.@toolTip));				else if (e.target.name == "toc")					_tt = new ToolTip(String(_xml.setup.buttons.tableOfContent.@toolTip));				else if (e.target.name == "full")					_tt = new ToolTip(String(_xml.setup.buttons.full.@toolTip));					else if (e.target.name == "tell")					_tt = new ToolTip(String(_xml.setup.buttons.tellAFriend.@toolTip));												_tt.alpha = 0;																										// set tool tip alpha to 0				this.parent.addChild(_tt);																							// add it to stage				TweenMax.to(_tt, 1, {alpha:1, ease:Expo.easeOut});							}		}				private function removeObject(obj:Sprite):void {			if(obj != null && this.parent.contains(obj)){				this.parent.removeChild(obj);																					// function used to remove tool tips and other objects from stage			}			}		private function removed(e:Event):void {			stage.removeEventListener(Event.RESIZE, resize);																	// remove resize event when Controlpanel removed form stage			this.removeEventListener(MouseEvent.ROLL_OUT, controlOut);		}		public function set xml(tmp:XML):void {				_xml = tmp;																											// set xml file 			loadIcons();																									// call setupControls function 			stage.addEventListener(Event.RESIZE, resize, false, 0, true);														// add the resize event			}		public function set book(tmp:int):void {			_book = tmp;																										// set the book index		}	}}