package com.massiveProCreation.flipbook.ui{	// IMPORTS	import flash.display.Sprite;	import flash.display.MovieClip;	import flash.text.TextFieldAutoSize;	import flash.text.TextField;	import flash.net.navigateToURL;	import com.massiveProCreation.events.*;	import com.massiveProCreation.flipbook.ui.ToolTip;	import com.massiveProCreation.flipbook.ui.Alert;		import com.greensock.TweenMax;	import com.greensock.easing.*;		import flash.events.MouseEvent;	import com.massiveProCreation.events.CustomEvent;			import flash.net.URLRequest;	import flash.net.URLVariables;	import flash.net.URLLoader;	import flash.net.URLRequestMethod;	public class Contact extends Sprite	{		// VARIABLES		private var _xml:XML;																	// xml file		private var _tt:ToolTip;																// tool tip module		private var _alert:Alert;																// alert module				public function Contact()		{			super();																			// call to the super class constructor		}		private function setupText():void {			title.htmlText = String(_xml.contact.text.title.@src);								// assign text to the title section 			txt.htmlText = String(_xml.contact.text.content)									// assign text to the main text section			names.text = String(_xml.contact.text.name.@src);									// assign the name			email.text = String(_xml.contact.text.email.@src);									// assign email			message.text = String(_xml.contact.text.message.@src);								// assign message			bSend.title.autoSize = TextFieldAutoSize.LEFT;										// set the audo size property for buttons text field			bClear.title.autoSize = TextFieldAutoSize.LEFT;											bSend.title.text = String(_xml.contact.text.send.@src);								// set the text for buttons			bClear.title.text = String(_xml.contact.text.clear.@src); 			bClear.bg.width = bClear.title.width + 10;											//  set the width of buttons background			bSend.bg.width = bSend.title.width + 10;			bClear.title.x = bSend.title.x = 5;													// set the x property of buttons text fields			bSend.x = 290 - bSend.width;			bClear.x = bSend.x - 3 - bClear.width;												// set x of the buttons						bg.close.buttonMode = bSend.buttonMode = bClear.buttonMode = true;					// set button mode for buttons			bg.close.mouseChildren = bSend.mouseChildren = bClear.mouseChildren = false;		// set mouse children of the buttons			bSend.addEventListener(MouseEvent.CLICK, sendClick, false, 0, true);				// add click, roll over and roll out event to each buton			bSend.addEventListener(MouseEvent.ROLL_OUT, bOut, false, 0, true);			bSend.addEventListener(MouseEvent.ROLL_OVER, bOver, false, 0, true);			bClear.addEventListener(MouseEvent.CLICK, clearClick, false, 0, true);			bClear.addEventListener(MouseEvent.ROLL_OUT, bOut, false, 0, true);			bClear.addEventListener(MouseEvent.ROLL_OVER, bOver, false, 0, true);			bg.close.addEventListener(MouseEvent.CLICK, closeClick, false, 0, true);			bg.close.addEventListener(MouseEvent.ROLL_OUT, bOut, false, 0, true);			bg.close.addEventListener(MouseEvent.ROLL_OVER, bOver, false, 0, true);						TextField(nameTxt).tabIndex = 0;													// set the tab index for each input field			TextField(emailTxt).tabIndex = 1;			TextField(messageTxt).tabIndex = 2;						setupIcons();																		// call of setupIcons function to setup social icons		}		private function closeClick(e:MouseEvent):void {			dispatchEvent(new CustomEvent(CustomEvent.BUTTON_CLICK, true, false));				// when close button clicked, dispatch the button click event		}		private function setupIcons():void {						if(String(_xml.contact.icons.twitter.@state) == "enabled"){							// check if twitter icon is enabled				twitter.buttonMode = true;														// set button mode				twitter.addEventListener(MouseEvent.CLICK, iconClick, false, 0, true);			// add click, roll over and roll out event				twitter.addEventListener(MouseEvent.ROLL_OUT, bOut, false, 0, true);				twitter.addEventListener(MouseEvent.ROLL_OVER, bOver, false, 0, true);			} else {				this.removeChild(twitter);														// else (if not enabled) remove twitter icon from stage			}						if(String(_xml.contact.icons.facebook.@state) == "enabled"){						// check if facebook enabled				facebook.buttonMode = true;														// set button mode				facebook.addEventListener(MouseEvent.CLICK, iconClick, false, 0, true);			// set click, roll over and roll out events				facebook.addEventListener(MouseEvent.ROLL_OUT, bOut, false, 0, true);				facebook.addEventListener(MouseEvent.ROLL_OVER, bOver, false, 0, true);								if(!this.contains(twitter)){					facebook.x = 30;															// set the x property				}							} else {				this.removeChild(facebook);														// if facebook not enabled remove the icon			}						if(String(_xml.contact.icons.website.@state) == "enabled"){							// check if website enabled				website.buttonMode = true;														// set button mode				website.addEventListener(MouseEvent.CLICK, iconClick, false, 0, true);			// add click, roll over and roll out events				website.addEventListener(MouseEvent.ROLL_OUT, bOut, false, 0, true);				website.addEventListener(MouseEvent.ROLL_OVER, bOver, false, 0, true);								if(!this.contains(facebook) && this.contains(twitter))												website.x = 65;																// set the x property 				else if(!this.contains(facebook) && !this.contains(twitter))					website.x = 30;																// set x							} else {				this.removeChild(website);														// remove icon if not enabled			}					}				public function set xml(tmp:XML):void {			_xml = tmp;																			// set xml file 			setupText();																		// call setupText function		}		private function clearClick(e:MouseEvent = null):void {			nameTxt.text = "";																	// when clear clicked remove text form input fields			emailTxt.text = "";			messageTxt.text = "";		}		private function sendClick(e:MouseEvent):void {			var _error:Boolean = false;															// error variable						if(nameTxt.text == ""){																					// check if there is name error				_alert = new Alert(String(_xml.contact.alert.name.@src), int(_xml.contact.alert.@delay));			// display alert				_error = true;																						// set error to true			} else if (emailTxt.text == ""){																		// check if email text contains  error				_alert = new Alert(String(_xml.contact.alert.email.@src), int(_xml.contact.alert.@delay));			// display alert				_error = true;																						// set error true			} else if (String(emailTxt.text).search("@") == -1){													// check email if contains @				_alert = new Alert(String(_xml.contact.alert.emailError.@src), int(_xml.contact.alert.@delay));		// display alert				_error = true;																						// set error to true			}else if (String(messageTxt.text).length < 2 ){															// check message for error				_alert = new Alert(String(_xml.contact.alert.message.@src), int(_xml.contact.alert.@delay));		// display alert				_error = true;																						// set error true			}				if(!_error){																							// if there is no error				var variables:URLVariables = new URLVariables();													// create url veriable				var varSend:URLRequest = new URLRequest("contact_parse.php");										// contact the php file				var varLoader:URLLoader = new URLLoader;															// create url loader				varSend.method = URLRequestMethod.POST;																// set the method to POST				varSend.data = variables;																			// assign URL variables															variables.userName = nameTxt.text;																	// set the text form each of the fields to the variables				variables.userEmail = emailTxt.text;				variables.userMsg = messageTxt.text;				variables.authorEmail = String(_xml.contact.@email);															varLoader.load (varSend);																			// send the variables to the php file								_alert = new Alert(String(_xml.contact.alert.send.@src), int(_xml.contact.alert.@delay));			// display the alert that message was send				clearClick();																						// clear the input fields			}							_alert.alpha = 0;																						// set alrt alpha to 0			_alert.addEventListener(CustomEvent.KILL, killAlert, false, 0, true);									// add kill event			this.parent.addChild(_alert);																			// added it to stage			_alert.x = stage.stageWidth / 2 ;																		// set the width and height			_alert.y = stage.stageHeight / 2;			TweenMax.to(_alert, 1, {alpha:1, ease:Expo.easeOut});													// tween its alpha to 1												}		private function killAlert(e:CustomEvent):void {			try{				if(_alert != null && this.parent.contains(_alert)) 													// try to kill the alert					this.parent.removeChild(_alert);																// remove it from stage			} catch (e:Error){				trace("Error = " + e);																				// if error couth trace it			}				}		private function iconClick(e:MouseEvent):void {			if(e.target.name == "twitter")																			// click function, check which icon was clicked and then navigate to specific url				navigateToURL(new URLRequest(String(_xml.contact.icons.twitter.@url)), String(_xml.contact.icons.twitter.@target));			else if (e.target.name == "facebook")				navigateToURL(new URLRequest(String(_xml.contact.icons.facebook.@url)), String(_xml.contact.icons.facebook.@target));			else if (e.target.name == "website")				navigateToURL(new URLRequest(String(_xml.contact.icons.website.@url)), String(_xml.contact.icons.website.@target));		}		private function bOver(e:MouseEvent):void {			TweenMax.to(e.target, 1, {alpha:0.8, ease:Expo.easeOut});												// tween icon after roll over											if(String(_xml.contact.@toolTips) == "enabled"){				if(e.target.name == "twitter")																		// check which icon it is and the show tool tip if it's enaled					_tt = new ToolTip(String(_xml.contact.icons.twitter.@toolTip));														else if (e.target.name == "facebook")					_tt = new ToolTip(String(_xml.contact.icons.facebook.@toolTip));				else if (e.target.name == "website")						_tt = new ToolTip(String(_xml.contact.icons.website.@toolTip));									if(e.target.name == "twitter" || e.target.name == "facebook" || e.target.name == "website"){	// if it's  an icon tween tool tips alpha					_tt.alpha = 0;								this.parent.addChild(_tt);					TweenMax.to(_tt, 1, {alpha:1, ease:Expo.easeOut});				}			}		}		private function bOut(e:MouseEvent):void {			TweenMax.to(e.target, 1, {alpha:1, ease:Expo.easeOut});							// roll out event if it's a icon hide tool tip											if(String(_xml.contact.@toolTips) == "enabled" && e.target.name == "twitter" || e.target.name == "facebook" || e.target.name == "website"){				_tt.remove();				TweenMax.to(_tt, 1, {alpha:0, ease:Expo.easeOut, onComplete:removeObject, onCompleteParams:[_tt]});			}		}		private function removeObject(obj:Sprite):void {			if(obj != null && this.contains(obj)){ 															// remove specified object				this.removeChild(obj);			}			}	}}