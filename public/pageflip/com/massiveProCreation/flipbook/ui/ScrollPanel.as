package com.massiveProCreation.flipbook.ui{			// TODO: roll over	// TODO: open on current page			// IMPORTS 	import com.greensock.TweenMax;	import com.greensock.easing.*;	import com.greensock.plugins.GlowFilterPlugin;	import com.massiveProCreation.events.CustomEvent;	import com.massiveProCreation.flipbook.ui.Alert;	import com.massiveProCreation.utils.scroll.ScrollBarEvent;		import flash.display.Bitmap;	import flash.display.BitmapData;	import flash.display.MovieClip;	import flash.display.Sprite;	import flash.events.Event;	import flash.events.MouseEvent;		public class ScrollPanel extends Sprite	{		// VARIABLES		private var _alert:Alert;		private var _source:Array = new Array();				// source array, contains the pages preview		private var _page:MovieClip;							// single page preview		private var _type:String;								// type of scroll panel		private var _addPage:AddPage;							// AddPage module		private var _alpha:Number = 1;								// bcackgroud alpha		private var _bg:uint = 0x000000;									// background color		private var _id:int;									// page id		private var _thumbHeight:Number = 290;						// thumbnail height		private var _bt:BookTitle;								// book title		private var _prints:Array = new Array();				// seleceted prints array		private var _xml:XML;									// xml file		private var _reverse:Boolean = false;		private var _boarder:int = 0;		private var _book:int = -1;		private var _lines:Array = new Array();		private var _curPage:int = -1;		private var _numberOfAllPages:int = 0;		public function ScrollPanel(source:Array, type:String, xml:XML, reverse:Boolean = false, book:int = -1, page:int = -1)		{			_xml = xml;											// assign vargument values to the variables			_reverse = reverse;			_type = type;			_source = source;			_book = book;			_curPage = page;			_bg = uint(_xml.flipbook[_book].thumbnails.boarder.@color);			_boarder = int(_xml.flipbook[_book].thumbnails.boarder.@thickness);						for(var i:int = 0; i < _xml.flipbook[_book].page.length(); i++){				_numberOfAllPages++				if(String(_xml.flipbook[book].page[i].@type) == "double")					_numberOfAllPages++;			}						super();											// call the super class constructor			this.addEventListener(Event.ADDED_TO_STAGE, added, false, 0, true);			// add event, added to stage			this.addEventListener(Event.REMOVED_FROM_STAGE, removed, false, 0, true);	// add remove from stage event		}		public function removed(e:Event = null):void {			stage.removeEventListener(Event.RESIZE, resize);							// when obect removed form stage, remove all the events linking it to the satage,			if (e != null){				TweenMax.killChildTweensOf(this);				_source = null;			}		}		private function added(e:Event):void {			scrollContent.sb.addEventListener(ScrollBarEvent.VALUE_CHANGED, sbChange);			this.removeEventListener(Event.ADDED_TO_STAGE, added);					// when added to stage remove event			stage.addEventListener(Event.RESIZE, resize, false, 0, true);			// add the stage resize event			constructPanel();														// construct panel function call		}		private function resize(e:Event = null):void {			scrollContent.masker.width = stage.stageWidth - 100;			scrollContent.sb.track.center.width = stage.stageWidth - 113;			scrollContent.sb.track.right.x = scrollContent.sb.track.center.x + scrollContent.sb.track.center.width;						if(scrollContent.content.width < stage.stageWidth - 100){				scrollContent.sb.alpha = 0;				scrollContent.x = (stage.stageWidth - 100 - scrollContent.content.width ) * 0.5;			} else {				scrollContent.sb.alpha = 1;			}						}		private function sbChange(e:ScrollBarEvent):void		{			TweenMax.to(scrollContent.content, 1, {x:( -e.scrollPercent * ((scrollContent.content.width + 10) - scrollContent.masker.width)), ease:Expo.easeOut });		}		private function constructPanel():void {																					// construct the panel						var multi:Number;														// create new varibales			var bitmap:Bitmap;			var bitmapData:BitmapData;			scrollContent.masker.width = stage.stageWidth - 100;			scrollContent.masker.height = _thumbHeight  + 50;			scrollContent.sb.y = scrollContent.masker.height + 20;			scrollContent.sb.track.center.width = stage.stageWidth - 113;			scrollContent.sb.track.right.x = scrollContent.sb.track.center.x + scrollContent.sb.track.center.width;						var notAll:Boolean = false;						for(var k:int = 0; k < _source.length; k++){				if(_source[k] == undefined)					notAll = true;			}						if(_source.length < _numberOfAllPages && _type != "category" || notAll && _type != "category"){				_alert = new Alert("Pages are still loading", 5000);				_alert.alpha = 0;				_alert.addEventListener(CustomEvent.KILL, killAlert, false, 0, true);				this.parent.addChild(_alert);								if(_alert.width > 300)					_alert.x = (stage.stageWidth / 2) - 60;				else					_alert.x = (stage.stageWidth / 2) + 35 ;								_alert.y = stage.stageHeight / 2;				TweenMax.to(_alert, 1, {alpha:1, ease:Expo.easeOut });			}									for(var i:int = 0; i < _source.length; i++){				if(_source[i] != undefined) {					_page = new MovieClip();											// for each object in the source array,  create new page movieclip, 										if(_reverse){						_page.id = _source.length - i - 1;						_page.name = "page"+ i;					} else {																	_page.id = i;						_page.name = "page"+i;					}					if(_type == "category"){						_bg = uint(_xml.flipbook[i].thumbnails.boarder.@color);						_boarder = int(_xml.flipbook[i].thumbnails.boarder.@thickness);					}										if(_source[i] is Bitmap){											// then if it's a bitmap add it to bitmap object 						bitmap = new Bitmap(_source[i].bitmapData);					} else {						bitmapData = new BitmapData(_source[i].getChildAt(0).width, _source[i].getChildAt(0).height, false, 0x000000);						bitmapData.draw(_source[i]);						bitmapData.draw(_source[i].getChildAt(0));						bitmap = new Bitmap(bitmapData);						bitmap.smoothing  = true;					}										multi = _thumbHeight/bitmap.height;									// count the dimentions and resize the bitmap					bitmap.height = _thumbHeight;					bitmap.width = bitmap.width * multi;										_page.graphics.beginFill(_bg, _alpha);								// add the background					if(_type == "category"){											// depending from category setup the dimentions and x,y of the background						_page.graphics.drawRect(0, -_boarder * 0.5, bitmap.width + _boarder * 0.5, bitmap.height + _boarder);						bitmap.x = 0;					} else {						if(i % 2 != 0 && i != _source.length - 1){							bitmap.x = _boarder * 0.5;							_page.graphics.drawRect(0, -_boarder * 0.5, bitmap.width  + _boarder * 0.5 , bitmap.height + _boarder);						} else {							bitmap.x  = 0;								_page.graphics.drawRect(0, -_boarder * 0.5, bitmap.width + _boarder  * 0.5, bitmap.height + _boarder);						}					}						_page.graphics.endFill();									_page.addChild(bitmap);												// add bitmap to the page object 					_page.buttonMode = true;											// set button mode of the page					_page.y = 40;					_page.id = i;					if(scrollContent.content.getChildByName("page"+(i-1)) && _type == "category"){											_page.x = scrollContent.content.getChildByName("page"+(i-1)).x + scrollContent.content.getChildByName("page"+(i-1)).width  + 20; // set x property of the page									} else if(scrollContent.content.getChildByName("page"+(i-1))) {												if(i % 2 != 0) {							var _testX:Number = scrollContent.content.getChildByName("page"+(i-1)).x + scrollContent.content.getChildByName("page"+(i-1)).width + 20;							_page.x = _testX;						} else {								_page.x = scrollContent.content.getChildByName("page"+(i-1)).x + (scrollContent.content.getChildByName("page"+(i-1)).width);						}					}										if(_type != "printer" && _type != "pdf"){						_page.addEventListener(MouseEvent.ROLL_OVER, bOver, false, 0, true); // if type is not printer then add events to the page						_page.addEventListener(MouseEvent.ROLL_OUT, bOut, false, 0, true);						_page.addEventListener(MouseEvent.CLICK, pageClick, false, 0, true);					}					scrollContent.content.addChild(_page);											// at the end add it to the pageContainer										if(_type == "category"){						_bt = new BookTitle(_page.width, String(_xml.flipbook[i].@title));  // if this is scroll panel for category add book title						scrollContent.content.addChild(_bt);						_bt.y = 0;						_bt.x = _page.x + ((_page.width - _bt.width) / 2) - 3; 												} else if (_type == "printer" || _type == "pdf"){											// if this is scroll paner for printer add the add page button for each page						_addPage = new AddPage();						_addPage.id = i;						_addPage.addEventListener(MouseEvent.CLICK, addPageClick, false, 0, true);						_addPage.y = _page.y - 20;						scrollContent.content.addChild(_addPage);						_addPage.x = _page.x + ((_page.width - _addPage.width) / 2) - 3; 						_addPage.name = "addPage" + i;					}				} 				bitmap = null;				bitmapData = null;			}						scrollContent.content.alpha = 0;								if(scrollContent.content.width < stage.stageWidth - 100){				scrollContent.sb.alpha = 0;				scrollContent.x = (stage.stageWidth - 100 - scrollContent.content.width ) * 0.5;			} else {				scrollContent.sb.alpha = 1;			}			var percent:Number = 0;						if(_curPage < 0)				percent = scrollContent.content.getChildByName("page" + (_curPage + 1)).x / scrollContent.content.width;			else				percent = (scrollContent.content.getChildByName("page" + _curPage ).x + (48 * _curPage))/ scrollContent.content.width;					trace("PERCENT = " + percent);			scrollContent.sb.scrollTo(percent);						TweenMax.to(scrollContent.content, 1, {alpha:1, ease:Expo.easeOut});		}				private function addPageClick(e:MouseEvent):void{			for(var i:int = 0; i < _prints.length; i++){										// check for duplicates in the printer array				if(_prints[i] == e.target.id){					_prints[i] = -1;					return;					}			}			_prints.push(e.target.id);		}		private function bOver(e:MouseEvent):void {			if(_type != "category"){				if(e.target.id % 2 != 0 && e.target.parent.getChildByName("page"+(e.target.id+1)) && e.target.id != _source.length - 1){					TweenMax.to(e.target, 1, {y:50, ease:Expo.easeOut });					TweenMax.to(e.target.parent.getChildByName("page"+(e.target.id+1)), 1, {y:50, ease:Expo.easeOut });				} else if(e.target.parent.getChildByName("page"+(e.target.id-1)) && e.target.id != _source.length - 1) {					TweenMax.to(e.target.parent.getChildByName("page"+(e.target.id-1)), 1, {y:50, ease:Expo.easeOut });					TweenMax.to(e.target, 1, {y:50, ease:Expo.easeOut });				}								if(e.target.id == 0 || e.target.id == _source.length -1 ){					TweenMax.to(e.target, 1, {y:50, ease:Expo.easeOut });				}			} else {				TweenMax.to(e.target, 1, {y:50, ease:Expo.easeOut });			}								}		private function bOut(e:MouseEvent):void {						if(_type != "category"){				if(e.target.id % 2 != 0 && e.target.parent.getChildByName("page"+(e.target.id+1))){					TweenMax.to(e.target, 1, {y:40, ease:Expo.easeOut });					TweenMax.to(e.target.parent.getChildByName("page"+(e.target.id+1)), 1, {y:40, ease:Expo.easeOut });				} else if(e.target.parent.getChildByName("page"+(e.target.id-1))) {					TweenMax.to(e.target.parent.getChildByName("page"+(e.target.id-1)), 1, {y:40, ease:Expo.easeOut });					TweenMax.to(e.target, 1, {y:40, ease:Expo.easeOut });				}								if(e.target.id == 0 || e.target.id == _source.length -1 ){					TweenMax.to(e.target, 1, {y:40, ease:Expo.easeOut });				}							} else {				TweenMax.to(e.target, 1, {y:40, ease:Expo.easeOut });			}		}		private function pageClick(e:MouseEvent):void {			_id = e.target.id;				dispatchEvent(new CustomEvent(CustomEvent.PAGE_CLICK, true, false));			// dispatch page click event when page is clicked			}			private function killAlert(e:CustomEvent):void {			try{														// this function removes the alert from stage				if(_alert != null && this.parent.contains(_alert)) 					this.parent.removeChild(_alert);			} catch (e:Error){				trace("My error = " + e);			}				}		public function get pageIndex():int{			return _id;																		// easy way to get the id of the page from outsde of this class		}		public function get prints():Array{			return _prints;																	// returns the prints array 		}			}}