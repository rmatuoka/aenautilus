package com.massiveProCreation.flipbook.ui{	// enable send	// IMPORTS	import com.asual.swfaddress.*;	import com.greensock.TweenMax;	import com.greensock.easing.*;	import com.massiveProCreation.events.*;	import com.massiveProCreation.events.CustomEvent;	import com.massiveProCreation.flipbook.ui.Alert;	import com.massiveProCreation.flipbook.ui.ToolTip;		import flash.display.MovieClip;	import flash.display.Sprite;	import flash.events.MouseEvent;	import flash.net.URLLoader;	import flash.net.URLRequest;	import flash.net.URLRequestMethod;	import flash.net.URLVariables;	import flash.net.navigateToURL;	import flash.text.TextField;	import flash.text.TextFieldAutoSize;	public class TellAFriend extends Sprite	{		// VARIABLES		private var _xml:XML;																	// xml file		private var _tt:ToolTip;																// tool tip module		private var _alert:Alert;																// alert module				public function TellAFriend()		{			super();																			// call to the super class constructor		}		private function setupText():void {			title.htmlText = String(_xml.tellAFriend.text.title.@src);								// assign text to the title section 			email1.text = String(_xml.tellAFriend.text.yourEmail.@src);									// assign the name			email2.text = String(_xml.tellAFriend.text.email.@src);									// assign email			message.text = String(_xml.tellAFriend.text.message.@src);								// assign message			bSend.title.autoSize = TextFieldAutoSize.LEFT;										// set the audo size property for buttons text field			bClear.title.autoSize = TextFieldAutoSize.LEFT;											bSend.title.text = String(_xml.tellAFriend.text.send.@src);								// set the text for buttons			bClear.title.text = String(_xml.tellAFriend.text.clear.@src); 			bClear.bg.width = bClear.title.width + 10;											//  set the width of buttons background			bSend.bg.width = bSend.title.width + 10;			bClear.title.x = bSend.title.x = 5;													// set the x property of buttons text fields			bSend.x = 290 - bSend.width;			bClear.x = bSend.x - 3 - bClear.width;												// set x of the buttons						bg.close.buttonMode = bSend.buttonMode = bClear.buttonMode = true;					// set button mode for buttons			bg.close.mouseChildren = bSend.mouseChildren = bClear.mouseChildren = false;		// set mouse children of the buttons			bSend.addEventListener(MouseEvent.CLICK, sendClick, false, 0, true);				// add click, roll over and roll out event to each buton			bSend.addEventListener(MouseEvent.ROLL_OUT, bOut, false, 0, true);			bSend.addEventListener(MouseEvent.ROLL_OVER, bOver, false, 0, true);			bClear.addEventListener(MouseEvent.CLICK, clearClick, false, 0, true);			bClear.addEventListener(MouseEvent.ROLL_OUT, bOut, false, 0, true);			bClear.addEventListener(MouseEvent.ROLL_OVER, bOver, false, 0, true);			bg.close.addEventListener(MouseEvent.CLICK, closeClick, false, 0, true);			bg.close.addEventListener(MouseEvent.ROLL_OUT, bOut, false, 0, true);			bg.close.addEventListener(MouseEvent.ROLL_OVER, bOver, false, 0, true);						TextField(email1Txt).tabIndex = 0;													// set the tab index for each input field			TextField(email2Txt).tabIndex = 1;			TextField(messageTxt).tabIndex = 2;			var str:Array = SWFAddress.getPathNames();			var url:String = SWFAddress.getBaseURL()+ "#/" + str[0] + "/" + str[1];			url = url.replace(" ", "%20");			messageTxt.text = url;		}		private function closeClick(e:MouseEvent):void {			dispatchEvent(new CustomEvent(CustomEvent.BUTTON_CLICK, true, false));				// when close button clicked, dispatch the button click event		}				public function set xml(tmp:XML):void {			_xml = tmp;																			// set xml file 			setupText();																		// call setupText function		}		private function clearClick(e:MouseEvent = null):void {			email1Txt.text = "";																	// when clear clicked remove text form input fields			email2Txt.text = "";			messageTxt.text = "";		}		private function sendClick(e:MouseEvent):void {			var _error:Boolean = false;															// error variable						if(email1Txt.text == ""){																					// check if there is name error				_alert = new Alert(String(_xml.tellAFriend.alert.yourEmail.@src), int(_xml.tellAFriend.alert.@delay));			// display alert				_error = true;																						// set error to true			} else if (email2Txt.text == ""){																		// check if email text contains  error				_alert = new Alert(String(_xml.tellAFriend.alert.email.@src), int(_xml.tellAFriend.alert.@delay));			// display alert				_error = true;																						// set error true			} else if (String(email2Txt.text).search("@") == -1){													// check email if contains @				_alert = new Alert(String(_xml.tellAFriend.alert.emailError.@src), int(_xml.tellAFriend.alert.@delay));		// display alert				_error = true;																						// set error to true			}else if (String(messageTxt.text).length < 2 ){															// check message for error				_alert = new Alert(String(_xml.tellAFriend.alert.message.@src), int(_xml.tellAFriend.alert.@delay));		// display alert				_error = true;																						// set error true			}				if(!_error){																							// if there is no error				var variables:URLVariables = new URLVariables();													// create url veriable				var varSend:URLRequest = new URLRequest("tell_parse.php");										// contact the php file				var varLoader:URLLoader = new URLLoader;															// create url loader				varSend.method = URLRequestMethod.POST;																// set the method to POST				varSend.data = variables;																			// assign URL variables															variables.yourEmail = email1Txt.text;																	// set the text form each of the fields to the variables				variables.userEmail = email2Txt.text;				variables.userMsg = messageTxt.text;				variables.authorEmail = email1Txt.text;															varLoader.load (varSend);																			// send the variables to the php file								_alert = new Alert(String(_xml.tellAFriend.alert.send.@src), int(_xml.tellAFriend.alert.@delay));			// display the alert that message was send				clearClick();																						// clear the input fields			}							_alert.alpha = 0;																						// set alrt alpha to 0			_alert.addEventListener(CustomEvent.KILL, killAlert, false, 0, true);									// add kill event			this.parent.addChild(_alert);																			// added it to stage			_alert.x = stage.stageWidth / 2 ;																		// set the width and height			_alert.y = stage.stageHeight / 2;			TweenMax.to(_alert, 1, {alpha:1, ease:Expo.easeOut});													// tween its alpha to 1												}		private function killAlert(e:CustomEvent):void {			try{				if(_alert != null && this.parent.contains(_alert)) 													// try to kill the alert					this.parent.removeChild(_alert);																// remove it from stage			} catch (e:Error){				trace("Error = " + e);																				// if error couth trace it			}				}				private function bOver(e:MouseEvent):void {			TweenMax.to(e.target, 1, {alpha:0.8, ease:Expo.easeOut});												// tween icon after roll over				}		private function bOut(e:MouseEvent):void {			TweenMax.to(e.target, 1, {alpha:1, ease:Expo.easeOut});							// roll out event if it's a icon hide tool tip							}		private function removeObject(obj:Sprite):void {			if(obj != null && this.contains(obj)){ 															// remove specified object				this.removeChild(obj);			}			}	}}