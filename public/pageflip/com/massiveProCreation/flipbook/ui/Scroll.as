package com.massiveProCreation.flipbook.ui{	// IMPORTS	import flash.display.Sprite;	import flash.display.MovieClip;	import flash.text.TextField;	import flash.text.TextFieldAutoSize;	import flash.events.Event;	import flash.events.MouseEvent;	import flash.geom.ColorTransform;	import com.greensock.TweenMax;	import com.greensock.easing.*;		import com.massiveProCreation.flipbook.ui.ToolTip;	import com.massiveProCreation.events.CustomEvent;	public class Scroll extends Sprite	{		// VARIABLES		private var _value:Number;		// scroll value		private var _max:Number;		// scroll maximum		private var _min:Number;		// scroll minimum		private var _tt:ToolTip; 		// tool tip module				public function Scroll(txt:String = "Slideshow speed", min:Number = 10, max:Number = 1, start:Number = 5, color:uint = 0xFFFFFF, opacity:Number = 1)		{			super();																	// call the super class constructor			_min = min;																	// assign argument values to the veriables			_max = max;						var ct:ColorTransform = new ColorTransform;									// create color transform			ct.color = color;															// set color			title.autoSize = TextFieldAutoSize.LEFT;									// set auto size of the text field			title.text = txt;															// assign text to text field			ball.buttonMode = true;														// set button mode			bg.transform.colorTransform = ct;											// change the background color			bg.alpha = opacity;															// set background opacity			track.buttonMode = true;													// set track button mode			track.addEventListener(MouseEvent.CLICK, trackClick, false, 0, true);		// add track event						_value = start;																// set start value			setStart();																	// call set start function			this.addEventListener(Event.ADDED_TO_STAGE, added, false, 0, true);			// add added to stage event		}		private function added(e:Event):void {			ball.addEventListener(MouseEvent.MOUSE_DOWN, dragBall, false, 0, true);		// add ball event, mouse down, click ,roll over, roll our,			ball.addEventListener(MouseEvent.CLICK, stopDragBall, false, 0, true);			ball.addEventListener(MouseEvent.ROLL_OVER, ballOver, false, 0, true);			ball.addEventListener(MouseEvent.ROLL_OUT, ballOut, false, 0, true);			this.addEventListener(MouseEvent.CLICK, stopDragBall, false, 0, true);		// add click event		}		private function ballOver(e:MouseEvent):void {			_tt = new ToolTip(String("Level: " + _value));								// ball roll over, create new tool tip			_tt.alpha = 0;																// set tool tip alpha			this.parent.parent.addChild(_tt);											// add toll tip to stage			TweenMax.to(_tt, 1, {alpha:1, ease:Expo.easeOut});		}		private function ballOut(e:MouseEvent):void {			_tt.remove();																// on roll out remove your tool tip			TweenMax.to(_tt, 1, {alpha:0, ease:Expo.easeOut, onComplete:removeObject, onCompleteParams:[_tt]});		}				private function dragBall(e:MouseEvent):void {			this.addEventListener(MouseEvent.MOUSE_MOVE, ballMove, false, 0 , true);	// add mouse move event 		}		private function stopDragBall(e:MouseEvent):void {			this.removeEventListener(MouseEvent.MOUSE_MOVE, ballMove);					// remove mouse move event		}		private function removeObject(obj:Sprite):void {			if(obj != null && this.parent.parent.contains(obj)){				this.parent.parent.removeChild(obj);									// remove object from stage: tool tips etc.			}			}		private function setStart():void {			var tmp:Number;																// set the ball position on start depending on value			if(_min > 1)				tmp = 88/(_max - _min);			else 				tmp = 88/_max;							ball.x  = (_value * (tmp) + 8.5);			if(ball.x < 0)				ball.x = 96.5 + ball.x - 8.5;						if(ball.x < 8.5)				ball.x = 8.5;			else if (ball.x > 96.5)				ball.x = 96.5;				dispatchEvent(new CustomEvent(CustomEvent.BUTTON_CLICK, true, false));		// dispatch button click event		}		private function setValue():void {			var tmp:Number;																// when ball position changed set the new value			if(_min > 1)																// depending on the x position of the ball count the value				tmp = 88/(_max - _min);			else 				tmp = 88/_max;			_value = Math.round((((tmp * _min) + ball.x - 8.5) / tmp) * 10) / 10;			if(_tt != null){				_tt.updateText(String(_value));			}			dispatchEvent(new CustomEvent(CustomEvent.BUTTON_CLICK, true, false));		// dispatch the button click event		}		private function ballMove(e:MouseEvent):void {			ball.x = mouseX - 5;														// on ball drag set its x value 						if(ball.x < 8.5)				ball.x = 8.5;			else if (ball.x > 96.5)				ball.x = 96.5;									setValue();																	// call the setValue function to determine the value 			e.updateAfterEvent();														// update		}		private function trackClick(e:MouseEvent):void {			var target:Number = mouseX - 5;												// tween the ball to the specific position when track is clicked						if(target < 8.5)				target = 8.5;			else if (target > 96.5)				target = 96.5;							TweenMax.to(ball, 0.5, {x:target, ease:Expo.easeOut, onComplete:setValue });		}		public function get value():Number{			return _value;																// easy way to get scroll value from outside of this class		}	}}